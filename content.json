[{"title":"Javascript 学习之 Set 和 Map","date":"2018-07-25T09:01:41.000Z","path":"2018/07/25/Javascript-学习之-Set-和-Map/","excerpt":"ES6 推出了新的两个数据结构，分别是 Set 和 Map, 以及对应的 WeakSet 和 WeakMap。 这里主要的内容是总结一下 Set 和 Map 这两个数据结构的特点和用法。 1. SetSet 这种数据结构有点像是没有重复元素的数组，Set 的构造函数接受数组或者说有 iterable 接口的数据，因此，Set 也可以用来去除数组的重复数据。 1let set = new Set([1,2,3,4,5,5,\"5\"]) // Set &#123;1, 2, 3, 4, 5, \"5\"&#125; Set 实现去重时，判断的依据算法是类似于 ===，唯一不同在于 Set 的判断算法认为 NaN 与自身相等，而 === 任务 NaN 不等于自己。 1let set = new Set([NaN, NaN]) // Set &#123;NaN&#125;","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"Javascript 学习之继承","date":"2018-07-17T05:46:57.000Z","path":"2018/07/17/Javascript-学习之继承/","excerpt":"Javascript 的继承的实现方法有很多种，之前虽然学习过，但是没有综合整理过，这一次就来整理整理 Javascript 语言的继承方面的知识。关于详细的Javascript 的继承方面的知识，推荐大家去看那本红宝书 ————《JavaScript高级程序设计》。 虽然 ES6 推出了 class 这个概念，方便了我们开发人员的学习和理解，但是，class 只是一个语法糖，实际上底层的实现还是原来的那一套，利用原型链和构造函数来实现继承。因此要想 Javascript 的基本功牢实一点，还是需要去学习这些知识的。 在 Javascript 的继承实现里，目前有原型链继承法，构造函数继承法，组合继承法等等方法，下面我就一一对这些方法来进行说明。","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"Javascript 学习之字符串","date":"2018-07-12T11:52:41.000Z","path":"2018/07/12/Javascript-学习之字符串/","excerpt":"在 Javascript 中字符串(string)属于一种基本数据类型，当然也可以通过 new String() 这种方式来创建一个字符串对象。 基本包装类型在 Javascript 的语法里有一个比较奇特的一点，一个基本数据类型的变量能够像普通对象一样调用对象里的方法，比如下面这个例子 123let a = 1;a.toString() // \"1\"a.valueOf() // 1","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"浅谈 instanceof 和 typeof 的实现原理","date":"2018-05-28T05:28:42.000Z","path":"2018/05/28/浅谈-instanceof-和-typeof-的实现原理/","excerpt":"typeof 实现原理typeof 一般被用于判断一个变量的类型，我们可以利用 typeof 来判断number, string, object, boolean, function, undefined, symbol 这七种类型，这种判断能帮助我们搞定一些问题，比如在判断不是 object 类型的数据的时候，typeof 能比较清楚的告诉我们具体是哪一类的类型。但是，很遗憾的一点是，typeof 在判断一个 object 的数据的时候只能告诉我们这个数据是 object, 而不能细致的具体到是哪一种 object, 比如👉 123let s = new String('abc');typeof s === 'object'// trues instanceof String // true","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"JavaScript中的call,apply,bind学习总结","date":"2018-05-24T09:53:26.000Z","path":"2018/05/24/JavaScript中的call-apply-bind学习总结/","excerpt":"JavaScript 中的 call, apply, bind 这三个函数的作用和区别在各大论坛都被讨论了很多次了，但是我一直都还没来得及好好总结，这次正好看到了一个很不错的关于JavaScript 中 apply 、call 的详解，自己就学习并总结了一波~，正好更新一波博客😂","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"background-image 和 img 标签的区别","date":"2018-05-08T12:50:58.000Z","path":"2018/05/08/background-image-和-img-标签的区别/","excerpt":"这个问题其实是一个在我们写前端页面的时候很容易遇见的问题，看起来似乎用这两种方式都能够达到我们想要展示图片的目的，但是理解这两种方式之间的区别对于我们针对不同的情况来使用这两种方法有很大的帮助。那么它们的区别究竟是什么呢：","tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"vue的style标签中的scoped踩坑","date":"2018-03-30T03:34:54.000Z","path":"2018/03/30/vue的style标签中的scoped踩坑/","excerpt":"最近在新建一个项目的过程中发现了一个之前一直未涉及到的知识盲区😂(原谅我这个菜菜)，问题是这样的，我在项目文件中自己写了一个 reset 的 css 文件，主要用于调整一些基本的样式，我把这个 reset.css 文件引入了我的 App.vue 的 &lt;style&gt; 模块里，具体情况是这样的👉 123&lt;style lang=\"less\" scoped&gt;@import 'common/css/reset.css';&lt;/style&gt;","tags":[{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"}]},{"title":"浅析JavaScript中的this关键字","date":"2018-03-26T14:37:58.000Z","path":"2018/03/26/浅析JavaScript中的this关键字/","excerpt":"导语不得不说，作为一名初级的前端开发者，this关键字这个问题对于我来说一直是一个痛点，什么是this？什么是函数的执行环境？函数的执行环境和this之间的关联是什么？以及在不同的函数调用方式(function invocation,method invocation，constructor invocation，indirect invocation)里this的具体值是什么？于是我带着这些问题对this关键字进行了深入的学习，并写了一个相关的demo。","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]}]